// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: internal/gokv.proto

package internalpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	internalpb "github.com/tochemey/gokv/internal/internalpb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KVServiceName is the fully-qualified name of the KVService service.
	KVServiceName = "internalpb.KVService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KVServicePutProcedure is the fully-qualified name of the KVService's Put RPC.
	KVServicePutProcedure = "/internalpb.KVService/Put"
	// KVServiceGetProcedure is the fully-qualified name of the KVService's Get RPC.
	KVServiceGetProcedure = "/internalpb.KVService/Get"
	// KVServiceDeleteProcedure is the fully-qualified name of the KVService's Delete RPC.
	KVServiceDeleteProcedure = "/internalpb.KVService/Delete"
	// KVServiceKeyExistsProcedure is the fully-qualified name of the KVService's KeyExists RPC.
	KVServiceKeyExistsProcedure = "/internalpb.KVService/KeyExists"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	kVServiceServiceDescriptor         = internalpb.File_internal_gokv_proto.Services().ByName("KVService")
	kVServicePutMethodDescriptor       = kVServiceServiceDescriptor.Methods().ByName("Put")
	kVServiceGetMethodDescriptor       = kVServiceServiceDescriptor.Methods().ByName("Get")
	kVServiceDeleteMethodDescriptor    = kVServiceServiceDescriptor.Methods().ByName("Delete")
	kVServiceKeyExistsMethodDescriptor = kVServiceServiceDescriptor.Methods().ByName("KeyExists")
)

// KVServiceClient is a client for the internalpb.KVService service.
type KVServiceClient interface {
	// Put is used to distribute a key/value pair across a cluster of nodes
	Put(context.Context, *connect.Request[internalpb.PutRequest]) (*connect.Response[internalpb.PutResponse], error)
	// Get is used to retrieve a key/value pair in a cluster of nodes
	Get(context.Context, *connect.Request[internalpb.GetRequest]) (*connect.Response[internalpb.GetResponse], error)
	// Delete is used to remove a key/value pair from a cluster of nodes
	Delete(context.Context, *connect.Request[internalpb.DeleteRequest]) (*connect.Response[internalpb.DeleteResponse], error)
	// KeyExists is used to check the existence of a given key in the cluster
	KeyExists(context.Context, *connect.Request[internalpb.KeyExistsRequest]) (*connect.Response[internalpb.KeyExistResponse], error)
}

// NewKVServiceClient constructs a client for the internalpb.KVService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKVServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KVServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &kVServiceClient{
		put: connect.NewClient[internalpb.PutRequest, internalpb.PutResponse](
			httpClient,
			baseURL+KVServicePutProcedure,
			connect.WithSchema(kVServicePutMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[internalpb.GetRequest, internalpb.GetResponse](
			httpClient,
			baseURL+KVServiceGetProcedure,
			connect.WithSchema(kVServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[internalpb.DeleteRequest, internalpb.DeleteResponse](
			httpClient,
			baseURL+KVServiceDeleteProcedure,
			connect.WithSchema(kVServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		keyExists: connect.NewClient[internalpb.KeyExistsRequest, internalpb.KeyExistResponse](
			httpClient,
			baseURL+KVServiceKeyExistsProcedure,
			connect.WithSchema(kVServiceKeyExistsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// kVServiceClient implements KVServiceClient.
type kVServiceClient struct {
	put       *connect.Client[internalpb.PutRequest, internalpb.PutResponse]
	get       *connect.Client[internalpb.GetRequest, internalpb.GetResponse]
	delete    *connect.Client[internalpb.DeleteRequest, internalpb.DeleteResponse]
	keyExists *connect.Client[internalpb.KeyExistsRequest, internalpb.KeyExistResponse]
}

// Put calls internalpb.KVService.Put.
func (c *kVServiceClient) Put(ctx context.Context, req *connect.Request[internalpb.PutRequest]) (*connect.Response[internalpb.PutResponse], error) {
	return c.put.CallUnary(ctx, req)
}

// Get calls internalpb.KVService.Get.
func (c *kVServiceClient) Get(ctx context.Context, req *connect.Request[internalpb.GetRequest]) (*connect.Response[internalpb.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Delete calls internalpb.KVService.Delete.
func (c *kVServiceClient) Delete(ctx context.Context, req *connect.Request[internalpb.DeleteRequest]) (*connect.Response[internalpb.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// KeyExists calls internalpb.KVService.KeyExists.
func (c *kVServiceClient) KeyExists(ctx context.Context, req *connect.Request[internalpb.KeyExistsRequest]) (*connect.Response[internalpb.KeyExistResponse], error) {
	return c.keyExists.CallUnary(ctx, req)
}

// KVServiceHandler is an implementation of the internalpb.KVService service.
type KVServiceHandler interface {
	// Put is used to distribute a key/value pair across a cluster of nodes
	Put(context.Context, *connect.Request[internalpb.PutRequest]) (*connect.Response[internalpb.PutResponse], error)
	// Get is used to retrieve a key/value pair in a cluster of nodes
	Get(context.Context, *connect.Request[internalpb.GetRequest]) (*connect.Response[internalpb.GetResponse], error)
	// Delete is used to remove a key/value pair from a cluster of nodes
	Delete(context.Context, *connect.Request[internalpb.DeleteRequest]) (*connect.Response[internalpb.DeleteResponse], error)
	// KeyExists is used to check the existence of a given key in the cluster
	KeyExists(context.Context, *connect.Request[internalpb.KeyExistsRequest]) (*connect.Response[internalpb.KeyExistResponse], error)
}

// NewKVServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKVServiceHandler(svc KVServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kVServicePutHandler := connect.NewUnaryHandler(
		KVServicePutProcedure,
		svc.Put,
		connect.WithSchema(kVServicePutMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kVServiceGetHandler := connect.NewUnaryHandler(
		KVServiceGetProcedure,
		svc.Get,
		connect.WithSchema(kVServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kVServiceDeleteHandler := connect.NewUnaryHandler(
		KVServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(kVServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kVServiceKeyExistsHandler := connect.NewUnaryHandler(
		KVServiceKeyExistsProcedure,
		svc.KeyExists,
		connect.WithSchema(kVServiceKeyExistsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/internalpb.KVService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KVServicePutProcedure:
			kVServicePutHandler.ServeHTTP(w, r)
		case KVServiceGetProcedure:
			kVServiceGetHandler.ServeHTTP(w, r)
		case KVServiceDeleteProcedure:
			kVServiceDeleteHandler.ServeHTTP(w, r)
		case KVServiceKeyExistsProcedure:
			kVServiceKeyExistsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKVServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKVServiceHandler struct{}

func (UnimplementedKVServiceHandler) Put(context.Context, *connect.Request[internalpb.PutRequest]) (*connect.Response[internalpb.PutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internalpb.KVService.Put is not implemented"))
}

func (UnimplementedKVServiceHandler) Get(context.Context, *connect.Request[internalpb.GetRequest]) (*connect.Response[internalpb.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internalpb.KVService.Get is not implemented"))
}

func (UnimplementedKVServiceHandler) Delete(context.Context, *connect.Request[internalpb.DeleteRequest]) (*connect.Response[internalpb.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internalpb.KVService.Delete is not implemented"))
}

func (UnimplementedKVServiceHandler) KeyExists(context.Context, *connect.Request[internalpb.KeyExistsRequest]) (*connect.Response[internalpb.KeyExistResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internalpb.KVService.KeyExists is not implemented"))
}
